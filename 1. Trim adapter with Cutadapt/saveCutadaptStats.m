function saveCutadaptStats(folder)
%% Function written by Dr Eleni Christoforidou in MATLAB R2024b.

% This function processes summary statistics generated by the Cutadapt tool 
% from a set of `.txt` files, which report the total number of reads
% processed, the number of reads containing adapters, the number of reads 
% that were too short and were filtered out, and the number of reads written.
% The function extracts this information  and compiles the data into an Excel file.
% It also then calculates the percentage of reads that remained in the data
% and the percentage of reads that were filtered out and stores this
% information into the same Excel file.
%
% The `.txt` files used as input are summary files generated by the Cutadapt 
% tool during the adapter trimming/filtering process. The specific format and
% contents of these files are tailored to this project, including the naming 
% conventions for the sample IDs. The sample IDs are in the format
% `P<number>-<number>` and are extracted from the filenames.
%
% Input:
%   - folder: Path to the folder containing Cutadapt summary `.txt` files.
%
% Output:
%   - An Excel file named 'Cutadapt_summary_stats.xlsx' is created in the 
%     working directory. This file contains a table with the following columns:
%       * SampleID: The ID of each sample, extracted from the file names.
%       * TotalReadsProcessed: The total number of reads processed for each sample.
%       * ReadsWithAdapters: The number of reads containing adapters that
%         were trimmed.
%       * ReadsWritten: The number of reads remaining in the data after
%         trimming and filtering.
%       * %ReadsFilteredOut: The percentage of reads that were filtered out due to
%         being too short, being adapter-only reads, or no-adapter reads.
%       * %ReadsRemaining: The percentage of reads remaining in the data after
%         trimming and filtering.
%
% How to Run:
%   - Ensure that the folder containing the summary `.txt` files is
%     accessible from your current MATLAB path.
%   - Call the function with the folder path as the input argument:
%       saveCutadaptSummaryStats('path/to/folder')
%   - The function will process the files, compile the statistics, and save 
%     the results in the specified Excel file.
%
% Note:
%   - This function was written for a specific project. The sample IDs, 
%     file structure, and content are specific to this project's needs and 
%     may require modifications for use in different contexts or with 
%     different data formats.
%
%%
    % Define the output Excel file name
    outputExcelFile = 'Cutadapt_summary_stats.xlsx';
    
    % Process input folder
    [sampleIDs, totalReads, adapterReads, tooShortReads, writtenReads] = processFolderAdapters(folder);

    % Initialise arrays for the data
    SampleIDs = {};
    TotalReads = [];
    ReadsWithAdapters = [];
    ReadsTooShort = [];
    ReadsWritten = [];

    for i = 1:length(sampleIDs)
        sampleID = sampleIDs{i};

        SampleIDs{end+1} = sampleID;
        TotalReads(end+1) = totalReads(i); % Total reads processed
        ReadsWithAdapters(end+1) = adapterReads(i); % Reads containing adapters that were trimmed
        ReadsTooShort(end+1) = tooShortReads(i); % Reads that were too short and were discarded
        ReadsWritten(end+1) = writtenReads(i); % Reads that remained after filtering
    end
    
    % Calculate percentages
    percentRetainedReads = ReadsWithAdapters./TotalReads.*100; % Percentage of reads that remained in the data.
    percentFilteredReads = 100-percentRetainedReads; % Percentage of reads that were filtered out (too short, adapter-only, no-adapter reads)

    % Prepare data for Excel
    dataTable = table(SampleIDs', TotalReads', ReadsWithAdapters',  ReadsWritten', percentFilteredReads', percentRetainedReads', ...
        'VariableNames', {'SampleID', 'TotalReadsProcessed', 'ReadsWithAdapters', 'ReadsWritten', '%ReadsFilteredOut', '%ReadsRemaining'});
    
    % Write data to Excel
    writetable(dataTable, outputExcelFile, 'Sheet', 1, 'WriteRowNames', false);
    
    fprintf('Data has been saved to %s\n', outputExcelFile);
end

function [sampleIDs, totalReads, adapterReads, tooShortReads, writtenReads] = processFolderAdapters(directory)
    % Get a list of all txt files in the directory
    files = dir(fullfile(directory, '*.txt'));
    
    % Initialise arrays to store sample IDs, percentages, and total reads
    sampleIDs = {};
    totalReads = [];
    adapterReads = [];
    tooShortReads = [];
    writtenReads = [];

    % Loop through each file
    for i = 1:length(files)
        % Get the filename
        filename = files(i).name;
        
        % Extract the sample ID from the filename
        sampleID = regexp(filename, 'P\d+-\d', 'match', 'once');
        
        % Open the file and read its contents
        fileID = fopen(fullfile(directory, filename), 'r');
        content = textscan(fileID, '%s', 'Delimiter', '\n');
        fclose(fileID);
        
        % Find the relevant lines
        totalReadsLine = content{1}(contains(content{1}, 'Total reads processed:'));
        adapterReadsLine = content{1}(contains(content{1}, 'Reads with adapters:'));
        tooShortReadsLine = content{1}(contains(content{1}, 'Reads that were too short:'));
        writtenReadsLine = content{1}(contains(content{1}, 'Reads written (passing filters):'));

        % Extract the relevant values from the relevant lines
        totalReadsStr = regexp(totalReadsLine{1}, '(\d+[,|\d]*)', 'tokens', 'once');
        adapterReadsStr = regexp(adapterReadsLine{1}, '(\d+[,|\d]*)', 'tokens', 'once');
        tooShortReadsStr = regexp(tooShortReadsLine{1}, '(\d+[,|\d]*)', 'tokens', 'once');
        writtenReadsStr = regexp(writtenReadsLine{1}, '(\d+[,|\d]*)', 'tokens', 'once');

        % Convert strings to numbers
        totalReadsValue = str2double(strrep(totalReadsStr{1}, ',', ''));
        adapterReadsValue = str2double(strrep(adapterReadsStr{1}, ',', ''));
        tooShortReadsValue = str2double(strrep(tooShortReadsStr{1}, ',', ''));
        writtenReadsValue = str2double(strrep(writtenReadsStr{1}, ',', ''));

        % Store the sample IDs and number of reads
        sampleIDs{end+1} = sampleID;
        totalReads(end+1) = totalReadsValue;
        adapterReads(end+1) = adapterReadsValue;
        tooShortReads(end+1) = tooShortReadsValue;
        writtenReads(end+1) = writtenReadsValue;
    end
end